# -*- coding: utf-8 -*-
"""Consumer_Behavior_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13N7xk7Dy5RDKlhkMOMNvcZnGQZAvO1e5
"""

import numpy as np
import numpy.linalg as la
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn import linear_model
import statsmodels.api as sm

returns = pd.read_csv('marketing_campaign.csv',sep="\t")
returns

#Checking null values (empty cells)
#Income has 24 null values.
returns.isna().sum()

#Fill the 24 empty cells with median income value.
print(returns['Income'].median())
returns['Income'] = returns['Income'].fillna(returns['Income'].median())

#We will delete "Z_CostContact" and "Z_Revenue" since they consist of same values for each row. They do not contribute to the data set modeling.
returns = returns.drop(['Z_CostContact', 'Z_Revenue'],axis=1)

#We will delete many vairbales that won't be used.
returns = returns.drop(['ID', 'Dt_Customer', 'Recency', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Response'], axis=1)

#Heatmap
#There is no two attributes that show strong correlation, so we cannot drop any attributes (columns).
plt.figure(figsize=(10,10))
ax = sns.heatmap( returns.corr(), cmap= "coolwarm", annot = True )
plt.title( "Heat Map For Correlation Between Attributes" )
plt.show()

#Descriptive dataset 
returns.describe()

"""# ***Univariate Analysis***

# ***People Attributes Analysis***
"""

#Year_Birth
print(returns['Year_Birth'].value_counts())
print(returns['Year_Birth'].describe())

#Histogram
plt.hist(returns['Year_Birth'], density=False, bins=100) 
plt.xlabel('Year of Birth')

#Education
print(returns['Education'].value_counts())
print(returns['Education'].describe())

#Histogram
plt.hist(returns['Education'], density=False, bins=10) 
plt.ylabel('Counts')
plt.xlabel('Education')

#Marital_Status
print(returns['Marital_Status'].value_counts())
print(returns['Marital_Status'].describe())

#Histogram
plt.hist(returns['Marital_Status'], density=False, bins=30) 
plt.ylabel('Counts')
plt.xlabel('Marital_Status')

#Income
print(returns['Income'].value_counts())
print(returns['Income'].describe())

#Histogram
plt.hist(returns['Income'], density=False, bins=1000) 
plt.ylabel('Counts')
plt.xlabel('Income')

#Max income is $666666; Min income is $1730; Average income is $52247.25.

#Kidhome & Teenhome
#Add up Kidhome and Teenhome into TotalKidAndTeen.
returns['TotalKidAndTeen']=returns['Kidhome']+returns['Teenhome']
print(returns['TotalKidAndTeen'].value_counts())
print(returns['TotalKidAndTeen'].describe())

#Histogram
plt.hist(returns['TotalKidAndTeen'], density=False, bins=10) 
plt.ylabel('Counts')
plt.xlabel('TotalKidAndTeen')

"""28.48% of people have 0 kids; 50.35% of people have 1 kid; 18.79% of people have 2 kids; 2.36% of people have 3 kids.

# ***Products Attributes Analysis***
"""

#Total Amount Spent
returns['TotalAmountSpent']=returns['MntWines']+returns['MntFruits']+returns['MntMeatProducts']+returns['MntFishProducts']+returns['MntSweetProducts']+returns['MntGoldProds']
print(returns['TotalAmountSpent'].value_counts())
print(returns['TotalAmountSpent'].describe())

#Histogram
plt.hist(returns['TotalAmountSpent'], density=False, bins=1000) 
plt.ylabel('Counts')
plt.xlabel('TotalAmountSpent')

#Add all expenses together, and generate the descriptive data (Max, Min, Average).

"""# ***Multivariate Analysis***"""

#Use 1 to represent people with higher educations; Use 2 to represent people with lower educations
returns['Education']=returns['Education'].replace(['PhD', '2n Cycle', 'Graduation', 'Master'], 1)
returns['Education']=returns['Education'].replace(['Basic'], 2)

#Use 1 to represent people with someone; Use 2 to represent people with themselves
returns['Marital_Status']=returns['Marital_Status'].replace(['Married', 'Together'], 1)
returns['Marital_Status']=returns['Marital_Status'].replace(['Single', 'Divorced', 'Widow', 'Alone', 'YOLO', 'Absurd'], 2)

#Mutivariate Linear Regression Model
y = returns['TotalAmountSpent']
x = returns[['Year_Birth', 'Education', 'Marital_Status', 'Income', 'TotalKidAndTeen']]
x = sm.add_constant(x)
model = sm.OLS(y, x).fit()
print(model.summary())

#Linear Regression Model
y = returns['TotalAmountSpent']
x = returns[['Year_Birth', 'Education', 'Marital_Status', 'Income', 'TotalKidAndTeen']]

# with sklearn
regr = linear_model.LinearRegression()
regr.fit(x, y)

print('Intercept: \n', regr.intercept_)
print('Coefficients: \n', regr.coef_)

# with statsmodels
x = sm.add_constant(x) # adding a constant
 
model = sm.OLS(y, x).fit()
predictions = model.predict(x) 
 
print_model = model.summary()
print(print_model)